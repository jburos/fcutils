install.packages('settings')
featurecounts_dir <- '/la-forge/data2_projects/app-ps1-bci38/nextflow-rnaseq/featureCounts/gene_counts/'
feature_counts <- dir(featurecounts_dir, full.names = T, include.dirs = T)
feature_counts
feature_counts <- dir(featurecounts_dir, full.names = T, include.dirs = T, recursive = T) %>%
purrr::set_names(basename(.)) %>%
purrr::map(~ purrr::keep(., stringr::str_detect, pattern = pattern)) %>%
unlist()
library(tidyverse)
feature_counts <- dir(featurecounts_dir, full.names = T, include.dirs = T, recursive = T) %>%
purrr::set_names(basename(.)) %>%
purrr::map(~ purrr::keep(., stringr::str_detect, pattern = pattern)) %>%
unlist()
pattern = 'geneID$'
feature_counts <- dir(featurecounts_dir, full.names = T, include.dirs = T, recursive = T) %>%
purrr::set_names(basename(.)) %>%
purrr::map(~ purrr::keep(., stringr::str_detect, pattern = pattern)) %>%
unlist()
feature_counts <- dir(featurecounts_dir, full.names = T, include.dirs = T, recursive = T) %>%
purrr::set_names(basename(.)) %>%
unlist()
feature_counts
a <- names(feature_counts[[1]])
a <- names(feature_counts)[[1]]
b <- names(feature_counts)[[2]]
sbstr_locations <- stringri::stri_locate_all_regex(drop(attr(adist(a, b, counts=TRUE), "trafos")), "M+")[[1]]
cmn_sbstr <- stringri::stri_sub(longest_string(c(a,b)), sbstr_locations)
sbstr_locations <- stringi::stri_locate_all_regex(drop(attr(adist(a, b, counts=TRUE), "trafos")), "M+")[[1]]
cmn_sbstr <- stringi::stri_sub(longest_string(c(a,b)), sbstr_locations)
longest_string <- function(s) {
s[which.max(nchar(s))]
}
sbstr_locations <- stringi::stri_locate_all_regex(drop(attr(adist(a, b, counts=TRUE), "trafos")), "M+")[[1]]
cmn_sbstr <- stringi::stri_sub(longest_string(c(a,b)), sbstr_locations)
longest_cmn_sbstr <- longest_string(cmn_sbstr)
?adist
adist(names(feature_counts))
sbstr_locations <- stringi::stri_locate_all_regex(drop(attr(adist(a, b, counts=TRUE), "trafos")), "M+")[[1]]
cmn_sbstr <- stringi::stri_sub(longest_string(c(a,b)), sbstr_locations)
cmn_sbstr
x <- names(feature_counts)
str(cross(x, x))
str(purrr::cross(x, x))
str(purrr::cross(x))
str(purrr::cross2(x, x))
purrr::cross2(x, x) %>%
purrr::map(common_substrings) %>% str()
common_substrings <- function(a, b) {
sbstr_locations <- stringi::stri_locate_all_regex(drop(attr(adist(a, b, counts=TRUE), "trafos")), "M+")[[1]]
cmn_sbstr <- stringi::stri_sub(longest_string(c(a,b)), sbstr_locations)
}
#' Return the longest string of a vector/list of strings s
#' @param s character or list of strings
longest_string <- function(s) {
s[which.max(nchar(s))]
}
purrr::cross2(x, x) %>%
+     purrr::map(common_substrings) %>% str()
purrr::cross2(x, x) %>%
+     purrr::map(.f = common_substrings)
purrr::cross2(x, x) %>%
+     purrr::map(., .f = common_substrings)
purrr::cross2(x, x) %>%
+     purrr::map2(.f = common_substrings)
purrr::cross2(x, x) %>%
+     purrr::map2(.x = .[[1]], .y = .[[2]], .f = common_substrings)
purrr::cross2(x, x) %>%
+     purrr::map2(.x = .$1, .y = .$2, .f = ~ common_substrings(.x, .y))
purrr::cross2(x, x) %>%
+     purrr::map2(.f = ~ common_substrings(.x, .y))
purrr::cross2(x, x) %>%
+     purrr::map.f = ~ common_substrings(.[[1]], .[2]))
purrr::cross2(x, x) %>%
+     purrr::map(.f = ~ common_substrings(.[1], .[2]))
purrr::cross2(x, x) %>%
+     purrr::map(., .f = ~ common_substrings(.[1], .[2]))
purrr::cross2(x, x) %>%
+     purrr::map('1', .f = ~ common_substrings(.[1], .[2]))
purrr::cross2(x, x) %>%
+     purrr::map('1', .f = common_substrings)
purrr::cross2(x, x) %>%
+     purrr::map2('1', '2', .f = common_substrings)
purrr::cross2(x, x) %>%
+     purrr::map2('1', '2', .f = ~ common_substrings(.x, .y))
purrr::cross2(x, x) %>%
+     transpose()
purrr::cross2(x, x) %>% head()
purrr::cross2(x, x) %>%
purrr::map(common_substrings)
purrr::cross2(x, x) %>%
purrr::map2(~ common_substrings)
purrr::cross2(x, x) %>%
purrr::map2(~ common_substrings(.[[1]], .[[2]]))
purrr::cross2(x, x) %>%
purrr::map2('1', '2', ~ common_substrings(.x, ,y))
purrr::cross2(x, x) %>%
purrr::map2(.[[1]], .[[2[[]], ~ common_substrings(.x, ,y))
purrr::cross2(x, x) %>%
purrr::map2(.[[1]], .[[2]], ~ common_substrings(.x, ,y))
purrr::cross2(x, x) %>%
purrr::keep(~ '1')
purrr::cross2(x, x) %>%
purrr::keep(~ .[[1]])
purrr::cross2(x, x) %>%
purrr::map(~ .[[1]])
purrr::cross2(x, x) %>%
purrr::map(.[[1]])
purrr::cross2(x, x) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]]))
purrr::cross2(x, x) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
purrr::accumulate(~ .x[.x %in% .y])
purrr::cross2(x, x) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
purrr::accumulate(~ .x[.x %in% .y], .init = unlist(.))
purrr::cross2(x, x) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
unique()
purrr::cross2(x, x) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
unlist()
purrr::cross2(x, x) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
unlist() %>% unique()
# first find any substring shared by at least 2 strings
all_common_substrings <- purrr::cross2(x, x) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
unlist() %>% unique()
purrr::cross2(x, x) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
purrr::accumulate_right(.f = ~ .x[.x %in% .y], .init = all_common_substrings)
# first find any substring shared by at least 2 strings
all_common_substrings <- purrr::cross2(x, x) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
unlist() %>% unique()
purrr::cross2(x, x) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
purrr::accumulate(.f = ~ .x[.x %in% .y], .init = all_common_substrings)
purrr::cross2(x, x) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
purrr::reduce(.f = ~ .x[.x %in% .y], .init = all_common_substrings)
# first find any substring shared by at least 2 strings
all_common_substrings <- purrr::cross2(x, x) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
purrr::reduce(.f = ~ .x[.x %in% .y], .init = all_common_substrings)
all_common_substrings
# first find any substring shared by at least 2 strings
all_common_substrings <- purrr::cross2(x, x) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
purrr::reduce(.f = ~ .x[.x %in% .y])
all_common_substrings <- purrr::cross2(x, x) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
purrr::map(~ common_substrings(.[[1]], .[[2]]))
str(x)
sbstr_locations <- stringi::stri_locate_all_regex(drop(attr(adist(x, counts=TRUE), "trafos")), "M+")[[1]]
cmn_sbstr <- stringi::stri_sub(longest_string(c(x)), sbstr_locations)
View(sbstr_locations)
attr(adist(x, counts=TRUE), "trafos")
drop(attr(adist(x, counts=TRUE), "trafos")), "M+")
drop(attr(adist(x, counts=TRUE), "trafos"))
stringi::stri_locate_all_regex(drop(attr(adist(x, counts=TRUE), "trafos")), "M+")
stringi::stri_locate_all_regex(drop(attr(adist(x, counts=TRUE, partial = TRUE), "trafos")), "M+")
stringi::stri_locate_all_regex(drop(attr(adist(x, counts=TRUE), "trafos")), "M+")
cmn_sbstr <- stringi::stri_sub(longest_string(x), sbstr_locations)
stringi::stri_locate_all_regex(drop(attr(adist(purrr::cross2(x, x) %>% purrr::keep(~ .[[1]] != .[[2]]), counts=TRUE), "trafos")), "M+")
x <- purrr::cross2(a, b) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
unique()
x <- purrr::cross2(a, b) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
unique() %>%
# all common substrings
purrr::map(~ common_substrings(.[[1]], .[[2]]))
x
a <- names(feature_counts)[1:5]
b <- a
x <- purrr::cross2(a, b) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
unique() %>%
# for each pair, find common substrings
purrr::map(~ common_substrings(.[[1]], .[[2]]))
x <- purrr::cross2(a, b) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
unique() %>%
# for each pair, find common substrings
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
# summarise unique sets of substrings
unique()
higher_x <- x
a <- x[[1]]
b <- x[[2]]
a
b
x <- purrr::cross2(a, b) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
unique() %>%
# for each pair, find common substrings
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
# summarise unique sets of substrings
unique()
str(x)
a <- names(feature_counts)[1:5]
a
b <- a
x <- purrr::cross2(a, b) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
unique() %>%
# for each pair, find common substrings
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
# summarise unique sets of substrings
unique() %>%
na.omit()
str(x)
x <- purrr::cross2(a, b) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
unique() %>%
# for each pair, find common substrings
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
# summarise unique sets of substrings
unique() %>%
na.omit() %>%
purrr::map(~ .[length(.) > 1])
x
str(x)
x <- purrr::cross2(a, b) %>%
purrr::keep(~ .[[1]] != .[[2]]) %>%
unique() %>%
# for each pair, find common substrings
purrr::map(~ common_substrings(.[[1]], .[[2]])) %>%
# summarise unique sets of substrings
unique() %>%
na.omit() %>%
purrr::map(~ .[nchar(.) > 1])
s=x
x
str(x)
all_substrings <- x %>% unlist() %>% unique()
all_substrings
# keep any substring present in all original strings (a+/b)
all_substrings %>%
purrr::keep(~ all(. %in% unique(c(a, b))))
# keep any substring present in all original strings (a+/b)
all_substrings %>%
purrr::keep(~ all(stringr::str_detect(., unique(c(a, b)))))
# keep any substring present in all original strings (a+/b)
all_substrings %>%
purrr::keep(~ all(stringr::str_detect(unique(c(a, b)), pattern = .)))
# keep the longest of all substrings present in all original strings (a+/b)
all_substrings %>%
purrr::keep(~ all(stringr::str_detect(unique(c(a, b)), pattern = .))) %>%
longest_string(.)
source('~/projects/fcutils/R/string_utils.R')
longest_common_substring(names(feature_counts))
source('~/projects/fcutils/R/string_utils.R')
longest_common_substring(names(feature_counts))
# cross a with itself
x <- purrr::cross2(a, a) %>%
# exclude self-matches
purrr::keep(~ .[[1]] != .[[2]]) %>%
unique()
source('~/projects/fcutils/R/string_utils.R')
longest_common_substring(names(feature_counts))
source('~/projects/fcutils/R/string_utils.R')
longest_common_substring(names(feature_counts))
source('~/projects/fcutils/R/string_utils.R')
longest_common_substring(names(feature_counts))
source('~/projects/fcutils/R/string_utils.R')
longest_common_substring(names(feature_counts))
x <- names(feature_counts)
common_part <- longest_common_substring(x)
unique_names <- stringr::str_remove(x, pattern = common_part)
unique_names
devtools::document('.')
devtools::document('.')
devtools::document('.')
devtools::install_local('.')
fc <- get_featurecounts_files(Sys.getnv('FEATURECOUNTS_DIR'))
fc <- get_featurecounts_files(Sys.getenv('FEATURECOUNTS_DIR'))
str(fc)
fc
fc <- get_featurecounts_files(Sys.getenv('FEATURECOUNTS_DIR'))
library(fcutils)
fc <- get_featurecounts_files(Sys.getenv('FEATURECOUNTS_DIR'))
fc
str(fc)
fc
a <- load_data_from_feature_counts(files = files)
a <- load_data_from_feature_counts(files = fc)
??rowid_to_column
devtools::install_local('.')
devtools::install_local('.', force = T)
a <- load_data_from_feature_counts(files = fc)
dirname(names(feature_counts))
dirname(names(featurecounts_dir))
dirname(featurecounts_dir)
basename(dirname(featurecounts_dir))
devtools::document('.')
devtools::install_local('.')
devtools::install_local('.', force = T)
a <- load_data_from_feature_counts(files = fc)
str(fc)
debug(load_data_from_feature_counts)
a <- load_data_from_feature_counts(files = fc)
str(l)
l %>%
purrr::map(purrr::set_names, c('Geneid', 'Chr',  'Start',  'End',  'Strand', 'Length', 'count')) %>%
purrr::map(tibble::rowid_to_column, var = 'rowid') %>% str()
str(l)
l %>%
purrr::map(purrr::set_names, c('Geneid', 'Chr',  'Start',  'End',  'Strand', 'Length', 'count')) %>% str()
l <- files %>%
purrr::map(~ read.table(., skip=1, header = T))
str(l)
l %>% purrr::map(~ names(x)[[8]] <- 'count')
l %>%
purrr::map(~ `names<-(.[[ncol(.)]], 'count')) %>% str()
l %>%
purrr::map(~ `names<-`(.[[ncol(.)]], 'count')) %>% str()
l %>%
purrr::map(~ `names<-`(., c(names(.)[1:ncol(.)], 'count'))) %>% str()
l %>%
purrr::map(~ `names<-`(., c(names(.)[-1*ncol(.)], 'count'))) %>% str()
l %>%
purrr::map(~ purrr::set_names(., c(names(.)[-1*ncol(.)], 'count'))) %>% str()
l <- files %>%
purrr::map(~ read.table(., skip=1, header = T, stringsAsFactors = F)) %>%
purrr::map(~ purrr::set_names(., c(names(.)[-1*ncol(.)], 'count')))
if (!all(sapply(l, function(a) all(a$Geneid == l[[1]]$Geneid))))
stop("Gene IDs (first column) differ between files.")
# construct count matrix
counts <- sapply(l, function(a) a$count)
rownames(counts) <- l[[1]][[1]]
l[[1]][[1]]
annotation <- l %>%
purrr::map(tibble::rowid_to_column, var = 'rowid') %>%
dplyr::bind_rows(., .id = 'sample_id') %>%
dplyr::select(-sample_id, -count) %>%
dplyr::distinct() %>%
dplyr::arrange(rowid) %>%
dplyr::select(-rowid)
featurecounts <- tibble::lst(counts = counts, annotation = annotation)
featurecounts <- filter_feature_counts(featurecounts)
devtools::document('.')
source('~/projects/fcutils/R/string_utils.R')
devtools::install_local('.')
devtools::install_local('.', force = T)
